# Complete joystream development network
version: '3.4'
services:
  joystream-node:
    image: joystream/node:$JOYSTREAM_NODE_TAG
    restart: unless-stopped
    container_name: joystream-node
    volumes:
      - /root/.local/share/joystream-node/chain-data:/data
      - /root/.local/share/joystream-node:/root/.local/share/joystream-node
      - /root/joystream-node:/root/joystream-node
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    command: --chain /root/joystream-node/joy-mainnet.json --pruning archive --validator --name <Node Name> --unsafe-ws-external --unsafe-rpc-external --rpc-methods Unsafe  --rpc-cors all --prometheus-por 9615 --prometheus-external --base-path /data
    expose:
      - 9615
    ports:
      - "127.0.0.1:9944:9944"
      - "127.0.0.1:9933:9933"
      #- "127.0.0.1:9615:9615"
      - "30333:30333"

  colossus-1:
    image: joystream/storage-node:3.10.2
    container_name: colossus-1
    restart: on-failure
    volumes:
      - /data/joystream-storage:/data
      - /root/keys:/keystore
      - /data/joystream-storage/log:/logs
      - ./entrypoints/storage.sh:/joystream/entrypoints/storage.sh:ro
    working_dir: /joystream/storage-node
    ports:
      - 3333:3333
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    environment:
      # ACCOUNT_URI overrides command line arg --accountUri
      #- ACCOUNT_URI=${COLOSSUS_1_TRANSACTOR_URI}
      #- OTEL_EXPORTER_OTLP_ENDPOINT=${TELEMETRY_ENDPOINT}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=colossus-1,deployment.environment=production
    entrypoint: ['/joystream/entrypoints/storage.sh']
    command: [
      'server', '--worker=${COLOSSUS_1_WORKER_ID}', '--port=3333', '--uploads=/data',
      '--sync', '--syncInterval=10',
      '--queryNodeEndpoint=${COLOSSUS_QUERY_NODE_URL}',
      '--apiUrl=${JOYSTREAM_NODE_WS}',
      '--keyFile=/keystore/storage-role-key.json',
      '--elasticSearchEndpoint=${JOYSTREAM_ES_URL}',
      '--elasticSearchPassword=${JOYSTREAM_ES_PASSWORD}',
      '--elasticSearchUser=${JOYSTREAM_ES_USERNAME}',
      '--logFilePath=/logs'
    ]


  db:
    image: postgres:12
    container_name: db
    restart: unless-stopped
    ports:
      - '127.0.0.1:${DB_PORT}:${DB_PORT}'
    volumes:
      - query-node-data:/var/lib/postgresql/data
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
      POSTGRES_DB: ${INDEXER_DB_NAME}
      PGPORT: ${DB_PORT}

  graphql-server:
    image: joystream/query-node:1.6.0
    container_name: graphql-server
    restart: unless-stopped
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    environment:
      - DB_HOST=db
      - WARTHOG_APP_PORT=${GRAPHQL_SERVER_PORT}
      - GRAPHQL_PLAYGROUND_ENDPOINT=${GRAPHQL_PLAYGROUND_ENDPOINT}
      - GRAPHQL_PLAYGROUND_SUBSCRIPTION_ENDPOINT=${GRAPHQL_PLAYGROUND_SUBSCRIPTION_ENDPOINT}
      - GRAPHQL_PLAYGROUND_CDN_URL=${GRAPHQL_PLAYGROUND_CDN_URL}
      - OTEL_EXPORTER_OTLP_ENDPOINT=${TELEMETRY_ENDPOINT}
      - OTEL_RESOURCE_ATTRIBUTES=service.name=query-node,deployment.environment=production
    ports:
      - "${GRAPHQL_SERVER_PORT}:${GRAPHQL_SERVER_PORT}"
      - "127.0.0.1:${PROCESSOR_STATE_APP_PORT}:${PROCESSOR_STATE_APP_PORT}"
    depends_on:
      - db
    working_dir: /joystream
    entrypoint: ['/joystream/entrypoints/graphql-server.sh']

  processor:
    image: joystream/query-node:1.6.0
    container_name: processor
    restart: unless-stopped
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    environment:
      - INDEXER_ENDPOINT_URL=${PROCESSOR_INDEXER_GATEWAY}
      - TYPEORM_HOST=db
      - TYPEORM_DATABASE=${DB_NAME}
      - BATCH_SIZE=100
      - QUEUE_FACTOR=1
      - QUEUE_MAX_CAP_FACTOR=4
      - WARTHOG_DB_HOST=db
      - WARTHOG_DB_DATABASE=${DB_NAME}
      - WARTHOG_DB_USERNAME=${DB_USER}
      - WARTHOG_DB_PASSWORD=${DB_PASS}
      - WARTHOG_APP_PORT=4002
    depends_on:
      - db
    working_dir: /joystream
    entrypoint: sh
    command: >
      -c "
        yarn workspace query-node config:dev ;
        yarn workspace query-node-root db:prepare ;
        yarn workspace query-node-root db:migrate ;
        yarn workspace query-node-root processor:start
      "

  indexer:
    image: joystream/hydra-indexer:v5.0.0-alpha.1
    container_name: indexer
    restart: unless-stopped
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    environment:
      - DB_NAME=${INDEXER_DB_NAME}
      - INDEXER_WORKERS=5
      - REDIS_URI=redis://redis:6379/0
      - WS_PROVIDER_ENDPOINT_URI=${JOYSTREAM_NODE_WS}
      - DB_HOST=db
    depends_on:
      - db
      - redis
    volumes:
      - ./types/augment/all/defs.json:/home/hydra/packages/hydra-indexer/types.json
    command: >
      sh -c "yarn db:bootstrap && yarn start:prod"

  hydra-indexer-gateway:
    image: joystream/hydra-indexer-gateway:5.0.0-alpha.1
    container_name: hydra-indexer-gateway
    restart: unless-stopped
    env_file:
      # relative to working directory where docker-compose was run from
      - .env
    environment:
      - WARTHOG_STARTER_DB_DATABASE=${INDEXER_DB_NAME}
      - WARTHOG_STARTER_DB_HOST=db
      - WARTHOG_STARTER_DB_PASSWORD=${DB_PASS}
      - WARTHOG_STARTER_DB_PORT=${DB_PORT}
      - WARTHOG_STARTER_DB_USERNAME=${DB_USER}
      - WARTHOG_STARTER_REDIS_URI=redis://redis:6379/0
      - WARTHOG_APP_PORT=${HYDRA_INDEXER_GATEWAY_PORT}
      - PORT=${HYDRA_INDEXER_GATEWAY_PORT}
    ports:
      - "${HYDRA_INDEXER_GATEWAY_PORT}:${HYDRA_INDEXER_GATEWAY_PORT}"
    depends_on:
      - db
      - redis

  redis:
    image: redis:6.0-alpine
    container_name: redis
    restart: unless-stopped
    ports:
      - "127.0.0.1:6379:6379"



volumes:
  chain-data:
    driver: local
  query-node-data:
    driver: local
  colossus-1-data:
    driver: local
  colossus-1-keystore:
    driver: local
  colossus-1-logs:
    driver: local
